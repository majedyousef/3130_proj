// Generated by view binder compiler. Do not edit!
package com.example.csci3130project.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.csci3130project.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentLoginBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button loginBtn;

  @NonNull
  public final EditText loginEmail;

  @NonNull
  public final EditText loginPass;

  @NonNull
  public final TextView noAccountTxt;

  @NonNull
  public final TextView textLogin;

  private FragmentLoginBinding(@NonNull ConstraintLayout rootView, @NonNull Button loginBtn,
      @NonNull EditText loginEmail, @NonNull EditText loginPass, @NonNull TextView noAccountTxt,
      @NonNull TextView textLogin) {
    this.rootView = rootView;
    this.loginBtn = loginBtn;
    this.loginEmail = loginEmail;
    this.loginPass = loginPass;
    this.noAccountTxt = noAccountTxt;
    this.textLogin = textLogin;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentLoginBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentLoginBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_login, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentLoginBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.loginBtn;
      Button loginBtn = ViewBindings.findChildViewById(rootView, id);
      if (loginBtn == null) {
        break missingId;
      }

      id = R.id.loginEmail;
      EditText loginEmail = ViewBindings.findChildViewById(rootView, id);
      if (loginEmail == null) {
        break missingId;
      }

      id = R.id.loginPass;
      EditText loginPass = ViewBindings.findChildViewById(rootView, id);
      if (loginPass == null) {
        break missingId;
      }

      id = R.id.noAccountTxt;
      TextView noAccountTxt = ViewBindings.findChildViewById(rootView, id);
      if (noAccountTxt == null) {
        break missingId;
      }

      id = R.id.text_login;
      TextView textLogin = ViewBindings.findChildViewById(rootView, id);
      if (textLogin == null) {
        break missingId;
      }

      return new FragmentLoginBinding((ConstraintLayout) rootView, loginBtn, loginEmail, loginPass,
          noAccountTxt, textLogin);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
